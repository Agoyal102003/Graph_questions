// Approach 1
-> Get the topo sort first 
-> Take the nodes out and relax the edges(take a distance array and mark with infinity)

void dfs(int node, vector<int>& vis, vector<vector<pair<int, int>>>& adjList,
     stack<int>& st)
     {
         vis[node]=1;
         for(auto it: adjList[node])
         {
             if(!vis[it.first])
             {
                 dfs(it.first, vis, adjList, st);
             }
         }
         st.push(node);
         return;
     }
  
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        // code here
        // Get the adjacency list 
        vector<vector<pair<int, int>>> adjList(N);
        for(int i=0; i<edges.size(); i++)
        {
            int u=edges[i][0];
            int v=edges[i][1];
            int w=edges[i][2];
            adjList[u].push_back({v, w});
        }
        vector<int> vis(N, 0);
        stack<int> st;
        for(int i=0; i<N; i++)
        {
            if(!vis[i])
            {
                dfs(i, vis, adjList, st);
            }
        }
        vector<int> dist(N, INT_MAX);
        dist[0]=0;
        
        while(!st.empty())
        {
            int node=st.top();
            st.pop();
            if (dist[node] != INT_MAX) {  // Ensure the node has been reached
            for (auto it : adjList[node]) {
                if (dist[it.first] > it.second + dist[node]) {
                    dist[it.first] = it.second + dist[node];
                }
            }
            }
            
        }
        
        for (int i = 0; i < N; i++) {
        if (dist[i] == INT_MAX) {
            dist[i] = -1;
        }
        }
        return dist;
    }
