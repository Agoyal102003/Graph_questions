// Approach 1 -> Topo Sort

string findOrder(string dict[], int N, int K)
        {
            vector<int> adj[K];
            for(int i=0; i<N-1; i++)
            {
                string S1= dict[i];
                string S2= dict[i+1];
                int len=min(S1.size(), S2.size());
                for(int j=0; j<len; j++)
                {
                    if(S1[j]!=S2[j])
                    {
                        adj[S1[j]].push_back(S2[j]);
                    }
                }
            }

            int indegree[V]={0};
	    for(int i=0; i<V; i++)
	    {
	        for(auto it: adj[i])
	        {
	            indegree[it]++;
	        }
	    }
	    queue<int> q;
	    for(int i=0; i<V; i++)
	    {
	        if(indegree[i]==0)
	        {
	            q.push(i);
	        }
	    }
	    vector<int> topo;
	    while(!q.empty())
	    {
	        int node=q.front();
	        q.pop();
	        topo.push_back(node);
	        //node is in your toposort so please remove it from your indegree
	        for(auto it: adj[node])
	        {
	            indegree[it]--;
	            if(indegree[it]==0)
	            {
	                q.push(it);
	            }
	        }
	    }
	    return topo;
        }
