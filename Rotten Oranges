// Approach 1

int orangesRotting(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();

        queue<pair<pair<int, int>, int>> q;
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                if(grid[i][j]==2)
                {
                    q.push({{i, j}, 0});
                }
            }
        }

        int delrow[]={-1, 0, +1, 0};
        int delcol[]={0, +1, 0, -1};
        int ans=0;

        while(!q.empty())
        {
            pair<pair<int, int>, int> node=q.front();
            q.pop();
            int row=node.first.first;
            int col=node.first.second;
            int time=node.second;
            if(time>ans)
            {
                ans=time;
            }

            for(int i=0; i<4; i++)
            {
                int nrow= row + delrow[i];
                int ncol= col + delcol[i];

                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]!=0 && grid[nrow][ncol]!=2)    {
                    grid[nrow][ncol]=2;
                    q.push({{nrow, ncol}, time+1});
                }
            }
        }

        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                if(grid[i][j]==1)
                {
                    return -1;
                }
            }
        }
        return ans;

        
    }
