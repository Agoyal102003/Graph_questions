// Approach 1

vector<int> shortestPath(vector<vector<int>>& edges, int N,int M, int src){
        // code here
        vector<vector<int>> adjList(N);
        for(int i=0; i<M; i++)
        {
            int u=edges[i][0];
            int v=edges[i][1];
            adjList[u].push_back(v);
            adjList[v].push_back(u);
        }
        vector<int> dist(N, INT_MAX);
        queue<int> q;
        dist[src]=0;
        q.push(src);
        
        while(!q.empty())
        {
            int node=q.front();
            q.pop();
            for(auto it: adjList[node])
            {
                if(dist[node] + 1 < dist[it])
                {
                    dist[it]=dist[node]+1;
                    q.push(it);
                }
            }
        }
        
        vector<int> ans(N, -1);
        for(int i=0; i<N; i++)
        {
            if(dist[i]!=INT_MAX)
            {
                ans[i]=dist[i];
            }
        }
        return ans;
    }
