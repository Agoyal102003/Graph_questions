// Approach 1 -> DFS
If a same node is visited on going on same path then only there is a cyle present in that.

bool dfs(int node, int vis[], int pathVis[], vector<int> adj[])
        {
            vis[node]=1;
            pathVis[node]=1;

            //traverse for adjacent nodes
            for(auto it: adj[node])
            {
                //when node is not visited
                if(!vis[it])
                {
                    if(dfs(it, vis, path, adj)) return true;
                }
                //when node is visited
                //but it has to be path visited
                else if(pathVis[it]==1)
                {
                    return true;
                }
            }

            pathVis[node]=0;
            return false;
        }

        bool isCyclic(int V, vector<int> adj[])
        {
            int vis[V]={0};
            int pathVis[V]={0};

            for(int i=0; i<V; i++)
            {
                if(!vis[i])
                {
                    if(dfs(i, vis, pathVis, adj)) return true;
                }
            }
            return false;

// Approach 2 -> BFS

bool CycleDetection(int V, vector<int> adj[]) 
	{
	    // code here
	    int indegree[V]={0};
	    for(int i=0; i<V; i++)
	    {
	        for(auto it: adj[i])
	        {
	            indegree[it]++;
	        }
	    }
	    queue<int> q;
	    for(int i=0; i<V; i++)
	    {
	        if(indegree[i]==0)
	        {
	            q.push(i);
	        }
	    }
	    vector<int> topo;
	    while(!q.empty())
	    {
	        int node=q.front();
	        q.pop();
	        topo.push_back(node);
	        //node is in your toposort so please remove it from your indegree
	        for(auto it: adj[node])
	        {
	            indegree[it]--;
	            if(indegree[it]==0)
	            {
	                q.push(it);
	            }
	        }
	    }
            if(topo.size()!=V)
             {
                return false;
             }
	    return true;
	}
        }
