// Approach 1 -> DFS
-> Only applied on DAG(Directed Acyclic Graph)
-> Topo Sort is the linear ordering of vertices such that if there is an edge between u and v, u appears before v in that ordering.

void dfs(int node, vector<int>& vis, vector<int> adj[], stack<int>& st)
	{
	    vis[node]=1;
	    
	    for(auto it: adj[node])
	    {
	        if(!vis[it])
	        {
	            dfs(it, vis, adj, st);
	        }
	    }
	    st.push(node);
	    return;
	}
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    vector<int> vis(V, 0);
	    vector<int> ans;
	    stack<int> st;
	    
	    for(int i=0; i<V; i++)
	    {
	        if(!vis[i])
	        {
	            dfs(i, vis, adj, st);
	        }
	    }
	    while(!st.empty())
	    {
	        ans.push_back(st.top());
	        st.pop();
	    }
	    return ans;
	    
	}

// Approach 2 -> BFS (Kahn's Algorithm)

vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    int indegree[V]={0};
	    for(int i=0; i<V; i++)
	    {
	        for(auto it: adj[i])
	        {
	            indegree[it]++;
	        }
	    }
	    queue<int> q;
	    for(int i=0; i<V; i++)
	    {
	        if(indegree[i]==0)
	        {
	            q.push(i);
	        }
	    }
	    vector<int> topo;
	    while(!q.empty())
	    {
	        int node=q.front();
	        q.pop();
	        topo.push_back(node);
	        //node is in your toposort so please remove it from your indegree
	        for(auto it: adj[node])
	        {
	            indegree[it]--;
	            if(indegree[it]==0)
	            {
	                q.push(it);
	            }
	        }
	    }
	    return topo;
	}


