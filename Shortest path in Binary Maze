// Approach 1 -> Dijkastra
We dont need a priority queue in this and we can use queue also as in this distance is already stored in a sorted manner and hence we will 
not need PQ

 int shortestPathBinaryMatrix(vector<vector<int>>& grid, pair<int, int> source, 
    pair<int, int> destination) {
         queue<pair<int, pair<int, int>>> q;
         int n=grid.size();
         int m=grid[0].size();
         vector<vector<int>> dist(n, vector<int>(m, INT_MAX));
         dist[source.first][source.second]=0;
         q.push({0, {source.first, source.second}});

         while(!q.empty())
         {
            auto it = q.front();
            q.pop();
            int dis=it.first;
            int row = it.second.first;
            int col=it.second.second;

            int delRow[]= {-1, 0, +1, 0};
            int delCol[]= {0, +1, 0, -1};

            for(int i=0; i<4; i++)
            {
                int nRow= row + delRow[i];
                int nCol= col + delCol[i];

                if(nRow>=0 && nRow<n && nCol>=0 && nCol<m && grid[nRow][nCol]==1 && 
                dis + 1 < dist[nRow][nCol])
                {
                    dist[nRow][nCol]=dis + 1;
                    if(row==destination.first && col==destination.second)
                    {
                         return dis+1;
                    }
                    q.push({dis+1, {nRow, nCol}});
                }
            }
         }
         return -1;
    }
