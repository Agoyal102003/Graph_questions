// Approach 1 -> small changes to Dijkastra (we will remember where we are coming from)
-> Just take an extra parent array 

vector<int> shortedPath(int n, int m, vector<vector<int>>& edges)
        {
            vector<pair<int, int>> adj[n+1];
            for(int it: edges)
            {
                int u=edges[i][0];
                int v=edges[i][1];
                int w=edges[i][2];

                adj[u].push_back({v, w});
                adj[v].push_back({u, w});
            }

            vector<pair<int, int>, greater<pair<int, int>>> pq;
            vector<int> dist(n+1, INT_MAX);
            vetcor<int> Parent(n+1);
            for(int i=1; i<n+1; i++)
            {
                Parent[i]=i;
            }
            dist[1]=0;
            pq.push({0, 1});

            while(!pq.empty())
            {
                auto it = pq.top();
                int node=it.second;
                int dis=it.first;
                pq.pop();

                for(auto it: adj[node])
                {
                    int adjNode=it.first;
                    int edgeWt=it.second;

                    if(dist[it]> dist[node]+edgeWt)
                    {
                        dist[it]=dist[node]+edgeWt;
                        pq.push({dist[it], it});
                        Parent[it]=node;
                    }
                }
            }
            if(dist[n]==INT_MAX) return {-1};
            vector<int> path;
            int node=n;
            while(Parent[node]!=node)
            {
                path.push_back(node);
                node=Parent[node];
            }
            path.push_back(1);
            reverse(path.begin(), path.end());
            return path;
        }
