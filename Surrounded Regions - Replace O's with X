// Approach 1
-> If someone is on the boundary it cannot be covered
-> Set of Zeroes connected with a boundary O cannot be converted to X

-> Start with the boundary zeroes and mark them that they will not be converted to X and convert the remaining zeroes

void dfs(int row, int col, vector<vector<int>>& vis, vector<vector<char>>& board) {
    int m = board.size();
    int n = board[0].size();
    vis[row][col] = 1;
    int markRow[] = {-1, 0, +1, 0};
    int markCol[] = {0, +1, 0, -1};

    for(int i = 0; i < 4; i++) {
        int nrow = row + markRow[i];
        int ncol = col + markCol[i];
        if(nrow >= 0 && nrow < m && ncol >= 0 && ncol < n && vis[nrow][ncol] == 0 && board[nrow][ncol] == 'O') {
            dfs(nrow, ncol, vis, board);
        }
    }
}

void solve(vector<vector<char>>& board) {
    int m = board.size();
    int n = board[0].size();
    vector<vector<int>> vis(m, vector<int>(n, 0));

    // Traverse first and last row
    for(int j = 0; j < n; j++) {
        // First row
        if(vis[0][j] == 0 && board[0][j] == 'O') {
            dfs(0, j, vis, board);
        }
        // Last row
        if(vis[m-1][j] == 0 && board[m-1][j] == 'O') {
            dfs(m-1, j, vis, board);
        }
    }

    // Traverse first and last column
    for(int i = 0; i < m; i++) {
        // First column
        if(vis[i][0] == 0 && board[i][0] == 'O') {
            dfs(i, 0, vis, board);
        }
        // Last column
        if(vis[i][n-1] == 0 && board[i][n-1] == 'O') {
            dfs(i, n-1, vis, board);
        }
    }

    for(int i = 0; i < m; i++) {
        for(int j = 0; j < n; j++) {
            if(vis[i][j] == 0 && board[i][j] == 'O') {
                board[i][j] = 'X';
            }
        }
    }
}
