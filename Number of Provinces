// Approach 1

void dfs(int node, vector<int>& vis, vector<vector<int>>& adjList)
    {
        vis[node]=1;
        for(auto it: adjList[node])
        {
            if(vis[it]==0)
            {
                dfs(it, vis, adjList);
            }
        }
        return;
    }
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n=isConnected.size();
        vector<vector<int>> adjList(n);
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<n; j++)
            {
                if(isConnected[i][j]==1 && i!=j)
                {
                    adjList[i].push_back(j);
                    adjList[j].push_back(i);
                }
            }
        }
        int ans=0;
        vector<int> vis(n, 0);
        for(int i=0; i<n; i++)
        {
            if(vis[i]==0)
            {
                ans++;
                dfs(i, vis, adjList);
            }
        }
        return ans;
    }
